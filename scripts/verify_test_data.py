#!/usr/bin/env python3
"""
Test Data Verification Script

This script shows sample data that was generated by the test data generator
and provides basic validation of the data integrity.

Usage:
    python scripts/verify_test_data.py
"""

import sys
import os
from datetime import datetime, timedelta

# Add project root to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from db.db_config import DB_CONFIG
import psycopg2
from psycopg2.extras import RealDictCursor

def get_db_connection():
    """Get database connection"""
    return psycopg2.connect(
        host=DB_CONFIG['host'],
        port=DB_CONFIG['port'],
        database=DB_CONFIG['database'],
        user=DB_CONFIG['user'],
        password=DB_CONFIG['password']
    )

def verify_data():
    """Verify and display sample test data"""
    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    print("🔍 LeadFi Test Data Verification")
    print("=" * 50)
    
    try:
        # Basic counts
        cursor.execute("SELECT COUNT(*) as count FROM lead")
        lead_count = cursor.fetchone()['count']
        
        cursor.execute("SELECT COUNT(*) as count FROM customer")
        customer_count = cursor.fetchone()['count']
        
        cursor.execute("SELECT COUNT(*) as count FROM activity")
        activity_count = cursor.fetchone()['count']
        
        cursor.execute("SELECT COUNT(*) as count FROM daily_trading_volume")
        trading_count = cursor.fetchone()['count']
        
        print(f"📊 Database Overview:")
        print(f"   Leads: {lead_count}")
        print(f"   Customers: {customer_count}")
        print(f"   Activities: {activity_count}")
        print(f"   Trading Records: {trading_count}")
        print()
        
        # Recent leads (last 5)
        print("📈 Recent Leads (Last 5):")
        cursor.execute("""
            SELECT full_name, company_name, type, status, source, 
                   bd_in_charge, date_created
            FROM lead 
            ORDER BY date_created DESC 
            LIMIT 5
        """)
        
        recent_leads = cursor.fetchall()
        for i, lead in enumerate(recent_leads, 1):
            print(f"   {i}. {lead['full_name']} ({lead['company_name']})")
            print(f"      Type: {lead['type']} | Status: {lead['status']}")
            print(f"      Source: {lead['source']} | BD: {lead['bd_in_charge']}")
            print(f"      Created: {lead['date_created'].strftime('%Y-%m-%d %H:%M')}")
            print()
        
        # Customer overview
        if customer_count > 0:
            print("🏢 Customer Overview:")
            cursor.execute("""
                SELECT c.name, c.type, c.country, c.bd_in_charge,
                       COUNT(tv.date) as trading_days,
                       SUM(tv.spot_maker_trading_volume + tv.spot_taker_trading_volume +
                           tv.futures_maker_trading_volume + tv.futures_taker_trading_volume) as total_volume
                FROM customer c
                LEFT JOIN daily_trading_volume tv ON c.customer_uid = tv.customer_uid
                GROUP BY c.customer_uid, c.name, c.type, c.country, c.bd_in_charge
                ORDER BY total_volume DESC NULLS LAST
                LIMIT 3
            """)
            
            top_customers = cursor.fetchall()
            for i, customer in enumerate(top_customers, 1):
                volume = float(customer['total_volume']) if customer['total_volume'] else 0
                print(f"   {i}. {customer['name']} ({customer['type']})")
                print(f"      Country: {customer['country']} | BD: {customer['bd_in_charge']}")
                print(f"      Trading Days: {customer['trading_days']} | Volume: ${volume:,.2f}")
                print()
        
        # Activity summary
        print("📝 Activity Summary (Last 7 Days):")
        seven_days_ago = datetime.now() - timedelta(days=7)
        cursor.execute("""
            SELECT activity_type, activity_category, COUNT(*) as count
            FROM activity 
            WHERE date_created >= %s
            GROUP BY activity_type, activity_category
            ORDER BY count DESC
            LIMIT 8
        """, (seven_days_ago,))
        
        activities = cursor.fetchall()
        for activity in activities:
            print(f"   {activity['activity_type']} ({activity['activity_category']}): {activity['count']}")
        print()
        
        # BD performance
        print("👥 BD Team Performance (Recent Activities):")
        cursor.execute("""
            SELECT assigned_to, COUNT(*) as activities,
                   COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed
            FROM activity 
            WHERE assigned_to != 'system' 
              AND date_created >= %s
            GROUP BY assigned_to
            ORDER BY activities DESC
            LIMIT 5
        """, (seven_days_ago,))
        
        bd_performance = cursor.fetchall()
        for bd in bd_performance:
            completion_rate = (bd['completed'] / bd['activities']) * 100 if bd['activities'] > 0 else 0
            print(f"   {bd['assigned_to']}: {bd['activities']} activities ({completion_rate:.1f}% completed)")
        print()
        
        # Data quality checks
        print("✅ Data Quality Checks:")
        
        # Check for leads without activities
        cursor.execute("""
            SELECT COUNT(*) as count 
            FROM lead l 
            LEFT JOIN activity a ON l.lead_id = a.lead_id 
            WHERE a.lead_id IS NULL
        """)
        leads_without_activities = cursor.fetchone()['count']
        
        # Check for customers without contacts
        cursor.execute("""
            SELECT COUNT(*) as count 
            FROM customer c 
            LEFT JOIN contact ct ON c.customer_uid = ct.customer_uid 
            WHERE ct.customer_uid IS NULL
        """)
        customers_without_contacts = cursor.fetchone()['count']
        
        # Check for trading records with zero volume
        cursor.execute("""
            SELECT COUNT(*) as count 
            FROM daily_trading_volume 
            WHERE (spot_maker_trading_volume + spot_taker_trading_volume + 
                   futures_maker_trading_volume + futures_taker_trading_volume) = 0
        """)
        zero_volume_records = cursor.fetchone()['count']
        
        print(f"   Leads without activities: {leads_without_activities}")
        print(f"   Customers without contacts: {customers_without_contacts}")
        print(f"   Zero volume trading records: {zero_volume_records}")
        
        # Conversion funnel
        print("\n🔄 Conversion Funnel:")
        cursor.execute("""
            SELECT status, COUNT(*) as count
            FROM lead
            GROUP BY status
            ORDER BY 
                CASE status
                    WHEN '1. lead generated' THEN 1
                    WHEN '2. proposal' THEN 2
                    WHEN '3. negotiation' THEN 3
                    WHEN '4. registration' THEN 4
                    WHEN '5. integration' THEN 5
                    WHEN '6. closed won' THEN 6
                    WHEN '7. lost' THEN 7
                    ELSE 8
                END
        """)
        
        funnel = cursor.fetchall()
        total_leads = sum(row['count'] for row in funnel)
        
        for stage in funnel:
            percentage = (stage['count'] / total_leads) * 100 if total_leads > 0 else 0
            print(f"   {stage['status']}: {stage['count']} ({percentage:.1f}%)")
        
        print("\n🎉 Data verification completed successfully!")
        
    except Exception as e:
        print(f"❌ Error during verification: {e}")
    finally:
        cursor.close()
        conn.close()

if __name__ == "__main__":
    verify_data() 